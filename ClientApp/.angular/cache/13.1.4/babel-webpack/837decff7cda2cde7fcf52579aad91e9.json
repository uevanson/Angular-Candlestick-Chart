{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"candlestickChart\"];\n\nfunction CandlestickChartComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"left\", ctx_r1.xM - 39.5, \"px\")(\"top\", ctx_r1.svgBottom - ctx_r1.margin.bottom, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.displayDate);\n  }\n}\n\nfunction CandlestickChartComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"top\", ctx_r2.yM - 10.5, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.displayPrice);\n  }\n}\n\nfunction CandlestickChartComponent_hr_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"hr\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r3.leftCrosshairWidth, \"px\")(\"left\", ctx_r3.leftOffSet, \"px\")(\"top\", ctx_r3.yM - ctx_r3.mouseHeightOffset / 2 - ctx_r3.mouseTopBias, \"px\");\n  }\n}\n\nfunction CandlestickChartComponent_hr_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"hr\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r4.rightCrosshairWidth, \"px\")(\"left\", ctx_r4.xM + ctx_r4.mouseWidthOffset / 2, \"px\")(\"top\", ctx_r4.yM - ctx_r4.mouseHeightOffset / 2 - ctx_r4.mouseTopBias, \"px\");\n  }\n}\n\nfunction CandlestickChartComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"div\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r5.topCrosshairHeight, \"px\")(\"top\", ctx_r5.topOffset, \"px\")(\"left\", ctx_r5.xM - ctx_r5.mouseLeftBias, \"px\");\n  }\n}\n\nfunction CandlestickChartComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"div\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r6.bottomCrosshairHeight, \"px\")(\"top\", ctx_r6.yM + ctx_r6.mouseHeightOffset / 2, \"px\")(\"left\", ctx_r6.xM - ctx_r6.mouseLeftBias, \"px\");\n  }\n}\n\nexport let CandlestickChartComponent = /*#__PURE__*/(() => {\n  class CandlestickChartComponent {\n    constructor(_renderer) {\n      this._renderer = _renderer;\n      this.candleFill = \"green\";\n      this.leftCrosshairWidth = 0;\n      this.rightCrosshairWidth = 0;\n      this.topCrosshairHeight = 0;\n      this.bottomCrosshairHeight = 0;\n      this.mouseWidthOffset = 30;\n      this.mouseHeightOffset = 30;\n      this.mouseTopBias = 5.5;\n      this.mouseLeftBias = 1.5;\n      this.showCrossHair = false;\n      this.mouseOnChart = true;\n      this.visibleData = [];\n      this.filteredData = [];\n      this.margin = {\n        top: 10,\n        bottom: 40,\n        left: 30,\n        right: 80\n      };\n      this.dateFormat = \"%Y-%m-%dT%H:%M:%S\";\n      this.onInint = true;\n      this.months = {\n        0: 'Jan',\n        1: 'Feb',\n        2: 'Mar',\n        3: 'Apr',\n        4: 'May',\n        5: 'Jun',\n        6: 'Jul',\n        7: 'Aug',\n        8: 'Sep',\n        9: 'Oct',\n        10: 'Nov',\n        11: 'Dec'\n      };\n      this.xPadding = 0.5;\n      this.selectedTimeFilter = ['selectedTimeFilter', 'YTD', 'YTD'];\n      this.transitionDuration = 300;\n      this.defaultWidth = 1000;\n      this.defaultHeight = 900;\n    }\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n      var _a;\n\n      console.log('ngAfterViewInit() hit');\n      this.svg = d3.select((_a = this.candlestickChart) === null || _a === void 0 ? void 0 : _a.nativeElement);\n      this.setElementDimensions(window.innerHeight, window.innerWidth);\n    }\n\n    ngOnChanges() {}\n\n    ngOnDestroy() {}\n\n    innerWidth(defaultWidth) {\n      if (this.candlestickChart) {\n        return this.candlestickChart.nativeElement.clientWidth - this.margin.left - this.margin.right;\n      } else {\n        return defaultWidth;\n      }\n    }\n\n    innerHeight(defaultHeight) {\n      if (this.candlestickChart) {\n        return this.candlestickChart.nativeElement.clientHeight - this.margin.top - this.margin.bottom;\n      } else {\n        return defaultHeight;\n      }\n    }\n\n    setElementDimensions(windowHeight, windowWidth) {\n      var rect = this.candlestickChart.nativeElement.getBoundingClientRect();\n      this.svgTop = rect.top;\n      this.svgLeft = rect.left;\n      this.svgRight = rect.right;\n      this.svgBottom = rect.bottom;\n      let setHeight = windowHeight - rect.top;\n      let setWidth = windowWidth - rect.left;\n      this.candlestickChart.nativeElement.style.height = setHeight + 'px';\n      this.candlestickChart.nativeElement.style.width = setWidth + 'px';\n    }\n\n    dateParser(date, format) {\n      const parseTime = d3.timeParse(format);\n      var newDate = parseTime(date);\n\n      if (newDate == null) {\n        return new Date();\n      } else {\n        return newDate;\n      }\n    }\n\n    getDates(data) {\n      var dateFormat = d3.timeParse(this.dateFormat);\n\n      for (var i = 0; i < data.length; i++) {\n        var dateString = data[i].date.toString();\n        this.data[i].date = dateFormat(dateString);\n      }\n\n      this.dates = data.map(d => {\n        return d.date;\n      });\n      this.datesStrings = data.map(d => {\n        return d.date.toString();\n      });\n    }\n\n    filterDataByDate(data, filter) {\n      const filterDate = new Date(filter);\n      const filteredData = data.filter(val => {\n        return val.date > filterDate;\n      });\n      return filteredData;\n    }\n\n    setMaxValue(data, property) {\n      return d3.max(data.map(r => r[property]));\n    }\n\n    setMinValue(data, property) {\n      return d3.min(data.map(r => r[property]));\n    }\n\n    dateSacleBuilder(dates) {\n      var dateScale = [];\n\n      for (var i = 0; i < dates.length; i++) {\n        if (i > 0 && i < dates.length) {\n          if (dates[i].getDate() == 1 || dates[i - 1].getDate() > dates[i].getDate()) {\n            if (dates[i].getFullYear() !== dates[i - 1].getFullYear()) {\n              dateScale[i] = dates[i].getFullYear().toString();\n            } else {\n              dateScale[i] = this.months[this.jsDates[i].getMonth()];\n            }\n          } else {\n            dateScale[i] = this.jsDates[i].getDate().toString();\n          }\n        } else {\n          if (dates[i].getDate() == 1) {\n            if (dates[i].getMonth() == 1) {\n              dateScale[i] = dates[i].getFullYear().toString();\n            } else {\n              dateScale[i] = this.months[this.jsDates[i].getMonth()];\n            }\n          } else {\n            dateScale[i] = dates[i].getDate().toString();\n          }\n        }\n      }\n\n      return dateScale;\n    }\n\n    drawChart(data, init) {\n      this.xMin = this.setMinValue(data, \"date\");\n      this.xMax = this.setMaxValue(data, \"date\");\n      var minP = +this.setMinValue(data, \"low\");\n      var maxP = +this.setMaxValue(data, \"high\");\n      var buffer = (maxP - minP) * 0.1;\n      this.yMin = minP - buffer;\n      this.yMax = maxP + buffer;\n      this.xMinIdx = 0;\n      this.xMaxIdx = data.length;\n      this.filteredData = data;\n      this.yScale = d3.scaleLinear().domain([this.yMin, this.yMax]).range([this.innerHeight(this.defaultHeight), 0]).nice();\n      this.yMin = this.yScale.domain()[0];\n      this.yMax = this.yScale.domain()[1];\n      this.yScaleFactor = (this.yMax - this.yMin) / this.innerHeight(this.defaultHeight);\n      this.xScale = d3.scaleLinear([0, this.innerWidth(this.defaultWidth)]).domain([this.xMinIdx, this.xMaxIdx]);\n      this.xBand = d3.scaleBand([0, this.innerWidth(this.defaultWidth)]).domain(this.datesStrings).padding(this.xPadding);\n      this.yAxis = d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"));\n      this.xAxis = d3.axisBottom(this.xScale).tickFormat(d => {\n        var date = new Date(this.dates[d]);\n        return date.getDate() + ' ' + this.months[date.getMonth()] + date.getFullYear().toString().substring(2, 4);\n      });\n\n      if (!init) {\n        this.svg.select('#xAxis').transition().duration(this.transitionDuration).delay(this.transitionDuration).attr('transform', `translate(${this.margin.left},${this.innerHeight(this.defaultHeight) + this.margin.top})`).call(d3.axisBottom(this.xScale).tickFormat(d => {\n          if (d >= 0 && d <= this.dates.length - 1) {\n            var date = new Date(this.dates[d]);\n            var hours = date.getHours();\n            return date.getDate() + ' ' + this.months[date.getMonth()] + date.getFullYear().toString().substring(2, 4);\n          }\n        })).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n        this.svg.select('#yAxis').transition().duration(this.transitionDuration).delay(this.transitionDuration).attr('transform', `translate(${this.innerWidth(this.defaultWidth) + this.margin.left}, ${this.margin.top})`).call(d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"))).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n        this.svg.selectAll(\"text\").transition().duration(this.transitionDuration).delay(this.transitionDuration).attr(\"fill\", 'azure');\n      } else {\n        this.svg.append(\"rect\").attr(\"id\", \"rect\").attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`).style(\"fill\", \"none\").style(\"pointer-events\", \"all\").attr(\"clip-path\", \"url(#clip)\");\n        this.gX = this.svg.append(\"g\").attr(\"id\", \"xAxis\").attr(\"class\", \"axis x-axis\").attr(\"transform\", `translate(${this.margin.left}, ${this.innerHeight(this.defaultHeight) + this.margin.top})`).call(this.xAxis);\n        this.gY = this.svg.append(\"g\").attr(\"id\", \"yAxis\").attr(\"class\", \"axis y-axis\").attr(\"transform\", `translate(${this.innerWidth(this.defaultWidth) + this.margin.left}, ${this.margin.top})`).call(this.yAxis);\n        this.clipPath = this.svg.append(\"g\").attr(\"class\", \"chartBody\").attr(\"clip-path\", \"url(#clip)\");\n      }\n\n      this.clipPath.selectAll(\".stem\").data(data).join(enter => enter.append(\"line\").attr(\"class\", \"stem\").attr(\"x1\", (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth() / 2).attr(\"x2\", (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth() / 2).attr(\"y1\", d => this.margin.top + this.yScale(d.high)).attr(\"y2\", d => this.margin.top + this.yScale(d.low)).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), update => update.attr(\"x1\", (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth() / 2).attr(\"x2\", (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth() / 2).attr(\"y1\", d => this.margin.top + this.yScale(d.high)).attr(\"y2\", d => this.margin.top + this.yScale(d.low)).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), exit => exit.attr(\"opacity\", 0).attr(\"height\", 0).transition().duration(this.transitionDuration).remove());\n      this.clipPath.selectAll(\".candle\").data(data).join(enter => enter.append(\"rect\").attr('x', (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth()).attr(\"class\", \"candle\").attr('y', d => this.margin.top + this.yScale(Math.max(d.open, d.close))).attr('width', this.xBand.bandwidth()).attr('height', d => d.open === d.close ? 1 : this.yScale(Math.min(d.open, d.close)) - this.yScale(Math.max(d.open, d.close))).attr(\"fill\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : this.candleFill).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), update => update.attr('x', (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth()).attr('y', d => this.margin.top + this.yScale(Math.max(d.open, d.close))).attr('width', this.xBand.bandwidth()).attr('height', d => d.open === d.close ? 1 : this.yScale(Math.min(d.open, d.close)) - this.yScale(Math.max(d.open, d.close))).attr(\"fill\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : this.candleFill).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), exit => exit.attr(\"height\", 0).attr(\"opacity\", 0).transition().duration(this.transitionDuration).remove());\n      this.svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\").attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`);\n      this.extent = [[0, 0], [this.innerWidth(this.defaultWidth), this.innerHeight(this.defaultHeight)]];\n      this.zoom = d3.zoom().scaleExtent([1, 100]).translateExtent(this.extent).extent(this.extent).on('zoom', event => this.zoomed(event)).on('zoom.end', event => this.zoomend(event));\n      this.svg.call(this.zoom);\n      this.svgElement = document.getElementById('candlestickChart');\n    }\n\n    zoomed(event) {\n      var t = event.transform;\n      let xScaleZ = t.rescaleX(this.xScale);\n\n      if (xScaleZ.domain()[1] - xScaleZ.domain()[0] > 10) {\n        let hideTicksWithoutLabel = function () {\n          d3.selectAll('.xAxis .tick text').each(function (d) {\n            if (d.innerHTML === '') {\n              d.parentElement.style.display = 'none';\n            }\n          });\n        };\n\n        this.gX.call(d3.axisBottom(xScaleZ).tickFormat(d => {\n          if (d >= 0 && d <= this.dates.length - 1) {\n            var date = new Date(this.dates[d]);\n            var hours = date.getHours();\n            var minutes = (date.getMinutes() < 10 ? '0' : '') + date.getMinutes();\n            var amPM = hours < 13 ? 'am' : 'pm';\n            return date.getDate() + ' ' + this.months[date.getMonth()] + date.getFullYear().toString().substring(2, 4);\n          }\n        })).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n        this.svg.selectAll(\"text\").attr(\"fill\", 'azure');\n        this.xMinIdx = +d3.format('0f')(xScaleZ.domain()[0]);\n        this.xMaxIdx = +d3.format('0f')(xScaleZ.domain()[1]);\n        ;\n\n        if (this.xMaxIdx === undefined) {\n          this.xMaxIdx = this.dates.length;\n        }\n\n        if (0 > this.xMinIdx) {\n          this.xMinIdx = 0;\n        }\n\n        this.candles = this.clipPath.selectAll(\".candle\");\n        this.candles.attr(\"x\", (d, i) => this.margin.left + xScaleZ(i) - this.xBand.bandwidth() * t.k / 2).attr(\"width\", this.xBand.bandwidth() * t.k);\n        this.stems = this.clipPath.selectAll(\".stem\");\n        this.stems.attr(\"x1\", (d, i) => this.margin.left + xScaleZ(i)).attr(\"x2\", (d, i) => this.margin.left + xScaleZ(i));\n        hideTicksWithoutLabel();\n      }\n    }\n\n    zoomend(event) {\n      this.xMin = this.dates[this.xMinIdx];\n      this.xMax = this.dates[this.xMaxIdx];\n      var t = event.transform;\n      var resizeTimer;\n      let xScaleZ = t.rescaleX(this.xScale);\n      clearTimeout(resizeTimer);\n      resizeTimer = setTimeout(() => {\n        if (xScaleZ.domain()[1] - xScaleZ.domain()[0] > 10) {\n          if (this.xMax === undefined) {\n            this.xMax = this.dates[this.dates.length - 1];\n          }\n\n          this.filteredData = this.data.filter(d => d.date >= this.xMin && d.date <= this.xMax);\n          var minP = +d3.min(this.filteredData, d => d.low);\n          var maxP = +d3.max(this.filteredData, d => d.high);\n          var buffer = (maxP - minP) * 0.1;\n          this.yMin = minP - buffer;\n          this.yMax = maxP + buffer;\n          const p = d3.precisionFixed(0.01);\n          const f = d3.format(\".\" + p + \"f\");\n          this.yScale.domain([+f(this.yMin), +f(this.yMax)]).nice();\n          this.yMin = this.yScale.domain()[0];\n          this.yMax = this.yScale.domain()[1];\n          this.yScaleFactor = (this.yMax - this.yMin) / this.innerHeight(this.defaultHeight);\n          this.candles = this.clipPath.selectAll(\".candle\");\n          this.candles.transition().duration(this.transitionDuration).attr(\"y\", d => this.margin.top + this.yScale(Math.max(d[0].open, d[0].close))).attr(\"height\", d => d[0].open === d[0].close ? 1 : this.yScale(Math.min(d[0].open, d[0].close)) - this.yScale(Math.max(d[0].open, d[0].close)));\n          this.stems = this.clipPath.selectAll(\".stem\");\n          this.stems.transition().duration(this.transitionDuration).attr(\"y1\", d => this.margin.top + this.yScale(d[0].high)).attr(\"y2\", d => this.margin.top + this.yScale(d[0].low));\n          this.gY.transition().duration(this.transitionDuration).call(d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"))).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n          this.svg.selectAll(\"text\").transition().duration(this.transitionDuration).attr(\"fill\", 'azure');\n        }\n      }, 500);\n    }\n\n    resizeChart(datesStrings) {\n      var dates = this.dates.slice(this.xMinIdx, this.xMaxIdx + 1);\n      var datesStrings = this.datesStrings.slice(this.xMinIdx, this.xMaxIdx + 1);\n      this.xMin = this.setMinValue(this.filteredData, \"date\");\n      this.xMax = this.setMaxValue(this.filteredData, \"date\");\n      var minP = +this.setMinValue(this.filteredData, \"low\");\n      var maxP = +this.setMaxValue(this.filteredData, \"high\");\n      var buffer = (maxP - minP) * 0.1;\n      this.yMin = minP - buffer;\n      this.yMax = maxP + buffer;\n      this.xScale = this.xScale.rangeRound([0, this.innerWidth(this.defaultWidth)]).domain([-1, dates.length]);\n      this.yScale = this.yScale.rangeRound([this.innerHeight(this.defaultHeight), 0]);\n      this.yMin = this.yScale.domain()[0];\n      this.yMax = this.yScale.domain()[1];\n      this.yScaleFactor = (this.yMax - this.yMin) / this.innerHeight(this.defaultHeight);\n      this.xBand = d3.scaleBand([0, this.innerWidth(this.defaultWidth)]).domain(datesStrings).padding(this.xPadding);\n      this.svg.select(\"#rect\").transition().duration(0).attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`);\n      this.svg.select(\"#clip rect\").transition().duration(0).attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`);\n      this.svg.select('#xAxis').transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr('transform', `translate(${this.margin.left},${this.innerHeight(this.defaultHeight) + this.margin.top})`).call(d3.axisBottom(this.xScale).tickFormat(d => {\n        if (d >= 0 && d <= dates.length - 1) {\n          var date = new Date(dates[d]);\n          return date.getDate() + ' ' + this.months[date.getMonth()] + date.getFullYear().toString().substring(2, 4);\n        }\n      })).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n      this.svg.select('#yAxis').transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr('transform', `translate(${this.innerWidth(this.defaultWidth) + this.margin.left}, ${this.margin.top})`).call(d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"))).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n      this.svg.selectAll(\"text\").transition().duration(this.transitionDuration).attr(\"fill\", 'azure');\n      this.candles = this.clipPath.selectAll(\".candle\");\n      this.candles.transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr(\"x\", (d, i) => this.margin.left + this.xScale(i) - this.xBand.bandwidth() / 2).attr(\"width\", this.xBand.bandwidth()).attr(\"y\", d => this.margin.top + this.yScale(Math.max(d[0].open, d[0].close))).attr(\"height\", d => d[0].open === d[0].close ? 1 : this.yScale(Math.min(d[0].open, d[0].close)) - this.yScale(Math.max(d[0].open, d[0].close)));\n      this.stems = this.clipPath.selectAll(\".stem\");\n      this.stems.transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr(\"y1\", d => this.margin.top + this.yScale(d[0].high)).attr(\"y2\", d => this.margin.top + this.yScale(d[0].low)).attr(\"x1\", (d, i) => this.margin.left + this.xScale(i)).attr(\"x2\", (d, i) => this.margin.left + this.xScale(i));\n    }\n\n  }\n\n  CandlestickChartComponent.ɵfac = function CandlestickChartComponent_Factory(t) {\n    return new (t || CandlestickChartComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  CandlestickChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CandlestickChartComponent,\n    selectors: [[\"candlestick-chart\"]],\n    viewQuery: function CandlestickChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.candlestickChart = _t.first);\n      }\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 6,\n    consts: [[\"id\", \"candlestickChart\", 1, \"chart\"], [\"candlestickChart\", \"\"], [\"id\", \"displayDate\", \"class\", \"date-ticker\", 3, \"left\", \"top\", 4, \"ngIf\"], [\"id\", \"displayPrice\", \"class\", \"price-ticker\", 3, \"top\", 4, \"ngIf\"], [\"class\", \"price-line\", 3, \"width\", \"left\", \"top\", 4, \"ngIf\"], [\"class\", \"date-line\", 3, \"height\", \"top\", \"left\", 4, \"ngIf\"], [\"id\", \"displayDate\", 1, \"date-ticker\"], [\"id\", \"displayPrice\", 1, \"price-ticker\"], [1, \"price-line\"], [1, \"date-line\"]],\n    template: function CandlestickChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelement(0, \"svg\", 0, 1);\n        i0.ɵɵtemplate(2, CandlestickChartComponent_div_2_Template, 3, 5, \"div\", 2);\n        i0.ɵɵtemplate(3, CandlestickChartComponent_div_3_Template, 3, 3, \"div\", 3);\n        i0.ɵɵtemplate(4, CandlestickChartComponent_hr_4_Template, 1, 6, \"hr\", 4);\n        i0.ɵɵtemplate(5, CandlestickChartComponent_hr_5_Template, 1, 6, \"hr\", 4);\n        i0.ɵɵtemplate(6, CandlestickChartComponent_div_6_Template, 1, 6, \"div\", 5);\n        i0.ɵɵtemplate(7, CandlestickChartComponent_div_7_Template, 1, 6, \"div\", 5);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrossHair && ctx.mouseOnChart);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrossHair && ctx.mouseOnChart);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrossHair && ctx.mouseOnChart);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrossHair && ctx.mouseOnChart);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrossHair && ctx.mouseOnChart);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCrossHair && ctx.mouseOnChart);\n      }\n    },\n    styles: [\".axis[_ngcontent-%COMP%]   path[_ngcontent-%COMP%], .axis[_ngcontent-%COMP%]   line[_ngcontent-%COMP%]{fill:none;stroke:#000;shape-rendering:crispEdges}.axis[_ngcontent-%COMP%]   text[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-size:11px;fill:#000}\"]\n  });\n  return CandlestickChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}